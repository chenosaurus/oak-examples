name: Runnability tests on changed examples

on:
  workflow_dispatch:
    inputs:
      log_level:
        description: 'Log level to use for pytest.'
        type: choice
        options:
          - ERROR
          - INFO
          - DEBUG
        default: INFO
        required: false
      platform:
        description: 'Platform to use for testing. By default both RVC2 and RVC4 are used but you can use only one by passing only `rvc2` or `rvc4`(use lowercase).'
        default: "all"
        required: false
      strict_mode:
        description: "If set to 'yes', tests will fail on DepthAI warnings."
        type: choice
        options:
          - "yes"
          - "no"
        default: "no"
        required: false
      subtests:
        description: "Specify if should run only peripheral, only standalone or both"
        type: choice
        options:
          - "all"
          - "peripheral"
          - "standalone"
        default: "all"
        required: false

jobs:
  id:
    name: Workflow ID Provider
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
        run: echo ${{ github.event.inputs.distinct_id }}
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix_platform: ${{ steps.set-matrix.outputs.platform }}
      matrix_python: ${{ steps.set-matrix.outputs.python }}
    steps:
      - id: set-matrix
        env:
          INPUT_PLATFORM: ${{ github.event.inputs.platform }}
          INPUT_PYTHON: "3.10" # Test only on python 3.10
        run: |
          if [ "$INPUT_PLATFORM" = "all" ]; then
            echo 'platform=["rvc2","rvc4"]' >> $GITHUB_OUTPUT
          else
            echo "platform=[\"$INPUT_PLATFORM\"]" >> $GITHUB_OUTPUT
          fi

          if [ "$INPUT_PYTHON" = "all" ]; then
            echo 'python=["3.8", "3.10", "3.12"]' >> $GITHUB_OUTPUT
          else
            echo "python=[\"$INPUT_PYTHON\"]" >> $GITHUB_OUTPUT
          fi
  
  update-hil:
    runs-on: ["self-hosted", "testbed-runner"]
    needs: setup
    steps:
      - name: Update HIL
        run: |
          cd /home/$USER/hil_framework
          git pull https://oauth2:${{ secrets.GITLAB_TOKEN }}@gitlab.luxonis.com/luxonis/hil_lab/hil_framework.git
          git fetch
          git checkout main

  test_peripheral:
    needs: [setup, update-hil]
    runs-on: ["self-hosted", "testbed-runner"]
    if: ${{ inputs.subtests== 'all' || inputs.subtests== 'peripheral'}}
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.setup.outputs.matrix_python) }}
        platform: ${{ fromJSON(needs.setup.outputs.matrix_platform) }}

      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # explicitly fetch full history

      - name: Detect changed example directories
        id: detect-changes
        run: |
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD)

          example_dirs=""
          while read -r file; do
            dir=$(dirname "$file")
            while [ "$dir" != "." ] && [ "$dir" != "/" ]; do
              if [[ -f "$dir/main.py" && -f "$dir/requirements.txt" ]]; then
                example_dirs="$example_dirs $dir"
                break
              fi
              dir=$(dirname "$dir")
            done
          done <<< "$changed_files"

          example_dirs=$(echo "$example_dirs" | tr ' ' '\n' | sort -u | xargs)
          echo "Changed example dirs: $example_dirs"
          echo "example_dirs=$example_dirs" >> $GITHUB_OUTPUT

      - name: Fail if no changed examples detected
        if: steps.detect-changes.outputs.example_dirs == ''
        run: |
          echo "❌ No changed examples found — skipping tests to avoid unnecessary HIL usage."
          exit 1

      - name: Add HIL Tools to Path
        run: |
          echo "/home/$USER/hil_framework/lib_testbed/tools" >> $GITHUB_PATH
          echo "PYTHONPATH="$PYTHONPATH:/home/$USER/hil_framework"" >> $GITHUB_ENV
          echo "HIL_FRAMEWORK_PATH="/home/$USER/hil_framework"" >> $GITHUB_ENV

      - name: Set model variable
        run: |
          if [ "${{ matrix.platform }}" = "rvc2" ]; then
            echo "MODEL=oak_d_s2" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" = "rvc4" ]; then
            echo "MODEL=oak4_pro or oak4_d" >> $GITHUB_ENV
          fi
          
      - name: Run Test
        run: |
          export RESERVATION_NAME="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#${{ matrix.python-version}}-${{ matrix.platform }}"
          export INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
          
          ENV_VARS="\
            --env PLATFORM=${{ matrix.platform }} \
            --env PYTHON_VERSION_ENV=${{ matrix.python-version }} \
            --env LOG_LEVEL=${{ github.event.inputs.log_level }} \
            --env ROOT_DIR='${{ steps.detect-changes.outputs.example_dirs }}' \
            --env STRICT_MODE=${{ github.event.inputs.strict_mode }} "

          if [[ -n "${{ github.event.inputs.reservation_name }}" ]]; then
                RESERVATION_OPTION="--reservation-name ${{ github.event.inputs.reservation_name }}"
                if [[ "${{ github.event.inputs.reservation_name }}" == https://github.com/luxonis/* ]]; then
                  HOLD_RESERVATION="--hold-reservation"
                fi
            else
                RESERVATION_OPTION="--reservation-name $RESERVATION_NAME"
          fi

          exec hil --models "$MODEL" $RESERVATION_OPTION $HOLD_RESERVATION --wait --sync-workspace \
              --dockerfile ./tests/Dockerfile_peripheral \
              --docker-build-args "--build-arg PYTHON_VERSION=${{ matrix.python-version }}" \
              --docker-run-args "$ENV_VARS"

  test_standalone:
    if: ${{ inputs.subtests== 'all' || inputs.subtests== 'standalone'}}
    needs: [setup, update-hil]
    runs-on: ["self-hosted", "testbed-runner"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # explicitly fetch full history

      - name: Detect changed example directories
        id: detect-changes
        run: |
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD)

          example_dirs=""
          while read -r file; do
            dir=$(dirname "$file")
            while [ "$dir" != "." ] && [ "$dir" != "/" ]; do
              if [[ -f "$dir/main.py" && -f "$dir/requirements.txt" ]]; then
                example_dirs="$example_dirs $dir"
                break
              fi
              dir=$(dirname "$dir")
            done
          done <<< "$changed_files"

          example_dirs=$(echo "$example_dirs" | tr ' ' '\n' | sort -u | xargs)
          echo "Changed example dirs: $example_dirs"
          echo "example_dirs=$example_dirs" >> $GITHUB_OUTPUT

      - name: Fail if no changed examples detected
        if: steps.detect-changes.outputs.example_dirs == ''
        run: |
          echo "❌ No changed examples found — skipping tests to avoid unnecessary HIL usage."
          exit 1

      - name: Add HIL Tools to Path
        run: |
          echo "/home/$USER/hil_framework/lib_testbed/tools" >> $GITHUB_PATH
          echo "PYTHONPATH="$PYTHONPATH:/home/$USER/hil_framework"" >> $GITHUB_ENV
          echo "HIL_FRAMEWORK_PATH="/home/$USER/hil_framework"" >> $GITHUB_ENV

      - name: Run Test
        run: |
          export RESERVATION_NAME="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#standalone"
          export INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
          
          ENV_VARS="\
            --env PLATFORM="rvc4" \
            --env PYTHON_VERSION_ENV="3.10" \
            --env LOG_LEVEL=${{ github.event.inputs.log_level }} \
            --env ROOT_DIR='${{ steps.detect-changes.outputs.example_dirs }}' \
            --env STRICT_MODE=${{ github.event.inputs.strict_mode }} \
            --env DEVICE_PASSWORD=${{ secrets.DEVICE_PASSWORD }}"

          if [[ -n "${{ github.event.inputs.reservation_name }}" ]]; then
                RESERVATION_OPTION="--reservation-name ${{ github.event.inputs.reservation_name }}"
                if [[ "${{ github.event.inputs.reservation_name }}" == https://github.com/luxonis/* ]]; then
                  HOLD_RESERVATION="--hold-reservation"
                fi
            else
                RESERVATION_OPTION="--reservation-name $RESERVATION_NAME"
          fi

          exec hil --models "oak4_pro or oak4_d" $RESERVATION_OPTION $HOLD_RESERVATION --wait --oakctl --sync-workspace \
              --dockerfile ./tests/Dockerfile_standalone \
              --docker-build-args "--build-arg PYTHON_VERSION=3.12" \
              --docker-run-args "$ENV_VARS"
